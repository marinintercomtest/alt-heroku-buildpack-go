#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo http://go.googlecode.com/files/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

# Expand to supported versions of Go, (e.g. expand "go1.5" to latest release go1.5.3)
# All specific or other versions, take as is.
expand_ver() {
  case $1 in
    go1.6)
      echo "go1.6beta2"
      ;;
    go1.5)
      echo "go1.5.3"
      ;;
    go1.4)
      echo "go1.4.3"
      ;;
    *)
      echo "$1"
      ;;
  esac
}

# Report deprecated versions to user
# Use after expand_ver
report_ver() {
  case $1 in
    go1.6beta2|go1.5.3|go1.4.3)
      # Noop
    ;;
    *)
      warn ""
      warn "Deprecated version of go ($1)"
      warn "See https://devcenter.heroku.com/articles/go-support#go-versions for supported version information."
      warn ""
    ;;
  esac
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH
steptxt="----->"

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.11.6/virtualenv.py" "$@"
}

warn() {
    echo -e >&2 "${YELLOW} !     $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

# Check we have a proper build file
if ! test -f $build/production_build_go.json
then
  warn "production_build_go_file is required"
  exit 1
else
  step "Checking production_build_go file."
  if ! jq -r . < $build/production_build_go.json > /dev/null
  then
      warn "Bad production_build_go.json file"
      exit 1
  fi
  name=$(<$build/production_build_go.json jq -r .Name)
  ver=$(<$build/production_build_go.json jq -r .GoVersion)
fi

# Install the right version of Go
ver=$(expand_ver $ver)

file=${GOFILE:-$ver.linux-amd64.tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

if test -e $build/bin && ! test -d $build/bin
then
    warn ""
    warn "File bin exists and is not a directory."
    warn ""
    exit 1
fi

report_ver $ver

if test -d $cache/$ver/go
then
    step "Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    cd $cache/$ver
    start "Installing $ver"
        curl -s $url | tar zxf -
    finished
    cd - >/dev/null
fi

mkdir -p $build/bin
GOBIN=$build/bin export GOBIN
GOROOT=$cache/$ver/go export GOROOT
GOPATH=$build/.heroku/go export GOPATH
PATH=$GOROOT/bin:$PATH

# Enforce use of /vendor folder
if test ! -d "$build/vendor"
then
  warn ""
  warn "vendor/ directory does not exist."
  warn ""
  exit 1
fi

p=$GOPATH/src/$name
mkdir -p $p
cp -R $build/* $p

# Default to $SOURCE_VERSION environment variable
GO_LINKER_VALUE=${SOURCE_VERSION}

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
env_dir="$3"
if [ -d "$env_dir" ]
then
    ln -sfn $build /app/code
  for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE GO15VENDOREXPERIMENT
    do
        if [ -f "$env_dir/$key" ]
        then
            export "$key=$(cat "$env_dir/$key")"
        fi
    done
fi

pkgs="./..."

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags heroku)
if [ -n "$GO_LINKER_SYMBOL" -a -n "$GO_LINKER_VALUE" ]
then
  case $ver in
  go1.5*|go1.6*)
    xval="$GO_LINKER_SYMBOL=$GO_LINKER_VALUE"
    ;;
  *)
    xval="$GO_LINKER_SYMBOL $GO_LINKER_VALUE"
    ;;
  esac
  FLAGS=(${FLAGS[@]} -ldflags "-X $xval")
fi

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p

# Install our package
step "Running: go install -v ${FLAGS[@]} $pkgs"
go install -v "${FLAGS[@]}" $pkgs

rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
cp $buildpack/vendor/concurrency.sh $build/.profile.d/
